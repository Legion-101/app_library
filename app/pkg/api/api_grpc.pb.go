// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: app/api/api.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppLibraryClient is the client API for AppLibrary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppLibraryClient interface {
	AuthorSearch(ctx context.Context, in *AuthorSearchRequest, opts ...grpc.CallOption) (*AuthorSearchResponse, error)
	BookSearch(ctx context.Context, in *BookSearchRequest, opts ...grpc.CallOption) (*BookSearchResponse, error)
}

type appLibraryClient struct {
	cc grpc.ClientConnInterface
}

func NewAppLibraryClient(cc grpc.ClientConnInterface) AppLibraryClient {
	return &appLibraryClient{cc}
}

func (c *appLibraryClient) AuthorSearch(ctx context.Context, in *AuthorSearchRequest, opts ...grpc.CallOption) (*AuthorSearchResponse, error) {
	out := new(AuthorSearchResponse)
	err := c.cc.Invoke(ctx, "/library.app_library/authorSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appLibraryClient) BookSearch(ctx context.Context, in *BookSearchRequest, opts ...grpc.CallOption) (*BookSearchResponse, error) {
	out := new(BookSearchResponse)
	err := c.cc.Invoke(ctx, "/library.app_library/bookSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppLibraryServer is the server API for AppLibrary service.
// All implementations must embed UnimplementedAppLibraryServer
// for forward compatibility
type AppLibraryServer interface {
	AuthorSearch(context.Context, *AuthorSearchRequest) (*AuthorSearchResponse, error)
	BookSearch(context.Context, *BookSearchRequest) (*BookSearchResponse, error)
	mustEmbedUnimplementedAppLibraryServer()
}

// UnimplementedAppLibraryServer must be embedded to have forward compatible implementations.
type UnimplementedAppLibraryServer struct {
}

func (UnimplementedAppLibraryServer) AuthorSearch(context.Context, *AuthorSearchRequest) (*AuthorSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorSearch not implemented")
}
func (UnimplementedAppLibraryServer) BookSearch(context.Context, *BookSearchRequest) (*BookSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookSearch not implemented")
}
func (UnimplementedAppLibraryServer) mustEmbedUnimplementedAppLibraryServer() {}

// UnsafeAppLibraryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppLibraryServer will
// result in compilation errors.
type UnsafeAppLibraryServer interface {
	mustEmbedUnimplementedAppLibraryServer()
}

func RegisterAppLibraryServer(s grpc.ServiceRegistrar, srv AppLibraryServer) {
	s.RegisterService(&AppLibrary_ServiceDesc, srv)
}

func _AppLibrary_AuthorSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppLibraryServer).AuthorSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.app_library/authorSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppLibraryServer).AuthorSearch(ctx, req.(*AuthorSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppLibrary_BookSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppLibraryServer).BookSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.app_library/bookSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppLibraryServer).BookSearch(ctx, req.(*BookSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppLibrary_ServiceDesc is the grpc.ServiceDesc for AppLibrary service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppLibrary_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "library.app_library",
	HandlerType: (*AppLibraryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "authorSearch",
			Handler:    _AppLibrary_AuthorSearch_Handler,
		},
		{
			MethodName: "bookSearch",
			Handler:    _AppLibrary_BookSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/api/api.proto",
}
